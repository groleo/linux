= Linux Device Drivers

[[Basics]]

== Driver Basics


=== Driver Entry and Exit points


=== Atomic and pointer manipulation


=== Delaying, scheduling, and timer routines


=== Wait queues and Wake events


=== High-resolution timers


=== Workqueues and Kevents


=== Internal Functions


=== Kernel objects manipulation


=== Kernel utility functions


=== Device Resource Management

[[devdrivers]]

== Device drivers infrastructure


=== The Basic Device Driver-Model Structures 


=== Device Drivers Base


=== Device Drivers DMA Management


=== Device Drivers Power Management


=== Device Drivers ACPI Support


=== Device drivers PnP support


=== Userspace IO devices

[[parportdev]]

== Parallel Port Devices

[[message_devices]]

== Message-based devices


=== Fusion message devices


=== I2O message devices

[[snddev]]

== Sound Devices

[[uart16x50]]

== 16x50 UART Driver

[[fbdev]]

== Frame Buffer Library


       The frame buffer drivers depend heavily on four data structures.
       These structures are declared in include/linux/fb.h.  They are
       fb_info, fb_var_screeninfo, fb_fix_screeninfo and fb_monospecs.
       The last three can be made available to and from userland.
     


       fb_info defines the current state of a particular video card.
       Inside fb_info, there exists a fb_ops structure which is a
       collection of needed functions to make fbdev and fbcon work.
       fb_info is only visible to the kernel.
     


       fb_var_screeninfo is used to describe the features of a video card
       that are user defined.  With fb_var_screeninfo, things such as
       depth and the resolution may be defined.
     


       The next structure is fb_fix_screeninfo. This defines the
       properties of a card that are created when a mode is set and can't
       be changed otherwise.  A good example of this is the start of the
       frame buffer memory.  This "locks" the address of the frame buffer
       memory, so that it cannot be changed or moved.
     


       The last structure is fb_monospecs. In the old API, there was
       little importance for fb_monospecs. This allowed for forbidden things
       such as setting a mode of 800x600 on a fix frequency monitor. With
       the new API, fb_monospecs prevents such things, and if used
       correctly, can prevent a monitor from being cooked.  fb_monospecs
       will not be useful until kernels 2.5.x.
     


=== Frame Buffer Memory


=== Frame Buffer Colormap


=== Frame Buffer Video Mode Database


=== Frame Buffer Macintosh Video Mode Database


=== Frame Buffer Fonts


           Refer to the file lib/fonts/fonts.c for more information.
        

[[input_subsystem]]

== Input Subsystem


=== Input core


=== Multitouch Library


=== Polled input devices


=== Matrix keyboars/keypads


=== Sparse keymap support

[[spi]]

== Serial Peripheral Interface (SPI)


	SPI is the "Serial Peripheral Interface", widely used with
	embedded systems because it is a simple and efficient
	interface:  basically a multiplexed shift register.
	Its three signal wires hold a clock (SCK, often in the range
	of 1-20 MHz), a "Master Out, Slave In" (MOSI) data line, and
	a "Master In, Slave Out" (MISO) data line.
	SPI is a full duplex protocol; for each bit shifted out the
	MOSI line (one per clock) another is shifted in on the MISO line.
	Those bits are assembled into words of various sizes on the
	way to and from system memory.
	An additional chipselect line is usually active-low (nCS);
	four signals are normally used for each peripheral, plus
	sometimes an interrupt.
  


	The SPI bus facilities listed here provide a generalized
	interface to declare SPI busses and devices, manage them
	according to the standard Linux driver model, and perform
	input/output operations.
	At this time, only "master" side interfaces are supported,
	where Linux talks to SPI peripherals and does not implement
	such a peripheral itself.
	(Interfaces to support implementing SPI slaves would
	necessarily look different.)
  


	The programming interface is structured around two kinds of driver,
	and two kinds of device.
	A "Controller Driver" abstracts the controller hardware, which may
	be as simple as a set of GPIO pins or as complex as a pair of FIFOs
	connected to dual DMA engines on the other side of the SPI shift
	register (maximizing throughput).  Such drivers bridge between
	whatever bus they sit on (often the platform bus) and SPI, and
	expose the SPI side of their device as a
	struct spi_master.
	SPI devices are children of that master, represented as a
	struct spi_device and manufactured from
	struct spi_board_info descriptors which
	are usually provided by board-specific initialization code.
	A struct spi_driver is called a
	"Protocol Driver", and is bound to a spi_device using normal
	driver model calls.
  


	The I/O model is a set of queued messages.  Protocol drivers
	submit one or more struct spi_message
	objects, which are processed and completed asynchronously.
	(There are synchronous wrappers, however.)  Messages are
	built from one or more struct spi_transfer
	objects, each of which wraps a full duplex SPI transfer.
	A variety of protocol tweaking options are needed, because
	different chips adopt very different policies for how they
	use the bits transferred with SPI.
  

[[i2c]]

== I^2^C and SMBus Subsystem


	I^2^C (or without fancy typography, "I2C")
	is an acronym for the "Inter-IC" bus, a simple bus protocol which is
	widely used where low data rate communications suffice.
	Since it's also a licensed trademark, some vendors use another
	name (such as "Two-Wire Interface", TWI) for the same bus.
	I2C only needs two signals (SCL for clock, SDA for data), conserving
	board real estate and minimizing signal quality issues.
	Most I2C devices use seven bit addresses, and bus speeds of up
	to 400 kHz; there's a high speed extension (3.4 MHz) that's not yet
	found wide use.
	I2C is a multi-master bus; open drain signaling is used to
	arbitrate between masters, as well as to handshake and to
	synchronize clocks from slower clients.
     


	The Linux I2C programming interfaces support only the master
	side of bus interactions, not the slave side.
	The programming interface is structured around two kinds of driver,
	and two kinds of device.
	An I2C "Adapter Driver" abstracts the controller hardware; it binds
	to a physical device (perhaps a PCI device or platform_device) and
	exposes a struct i2c_adapter representing
	each I2C bus segment it manages.
	On each I2C bus segment will be I2C devices represented by a
	struct i2c_client.  Those devices will
	be bound to a struct i2c_driver,
	which should follow the standard Linux driver model.
	(At this writing, a legacy model is more widely used.)
	There are functions to perform various I2C protocol operations; at
	this writing all such functions are usable only from task context.
     


	The System Management Bus (SMBus) is a sibling protocol.  Most SMBus
	systems are also I2C conformant.  The electrical constraints are
	tighter for SMBus, and it standardizes particular protocol messages
	and idioms.  Controllers that support I2C can also support most
	SMBus operations, but SMBus controllers don't support all the protocol
	options that an I2C controller will.
	There are functions to perform various SMBus protocol operations,
	either using I2C primitives or by issuing SMBus commands to
	i2c_adapter devices which don't support those I2C operations.
     

[[hsi]]

== High Speed Synchronous Serial Interface (HSI)


	High Speed Synchronous Serial Interface (HSI) is a
	serial interface mainly used for connecting application
	engines (APE) with cellular modem engines (CMT) in cellular
	handsets.

	HSI provides multiplexing for up to 16 logical channels,
	low-latency and full duplex communication.
     

